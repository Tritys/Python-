questions = {
    "Привет, Python!": [
        [
      {
        "question": "Что выведет `print('Hello, Python!')`?",
        "options": ["Hello, Python!", "Error", "Nothing", "'Hello, Python!'"],
        "answer": "Hello, Python!"
      },
      {
        "question": "Какая функция используется для вывода текста на экран в Python?",
        "options": ["show()", "display()", "print()", "write()"],
        "answer": "print()"
      },
      {
        "question": "Какой символ используется для обозначения строки в Python?",
        "options": ["#", "*", "'", "/"],
        "answer": "'"
      },
      {
        "question": "Что такое интерпретатор Python?",
        "options": ["Компилятор кода", "Программа для написания кода", "Программа для выполнения кода", "Текстовый редактор"],
        "answer": "Программа для выполнения кода"
      },
      {
         "question": "Как написать комментарий в Python?",
         "options": ["// This is a comment", "/* This is a comment */", "# This is a comment", "-- This is a comment"],
         "answer": "# This is a comment"
      },
      {
        "question":"Какой результат выполнения `print(2 + 3)`?",
        "options": ["'2+3'", "5", "Error", "23"],
        "answer": "5"
      },
       {
        "question":"Что выведет `print('10' + '5')`?",
        "options": ["15", "105", "Error", "10 + 5"],
        "answer": "105"
      },
       {
          "question":"Что выведет `print(type(10))`?",
          "options": ["<class 'str'>", "<class 'int'>", "<class 'float'>", "<class 'bool'>"],
          "answer": "<class 'int'>"
       },
      {
          "question": "Что выведет `print(type('Hello'))`?",
          "options": ["<class 'str'>", "<class 'int'>", "<class 'float'>", "<class 'bool'>"],
          "answer": "<class 'str'>"
      },
     {
         "question": "Можно ли использовать двойные кавычки для строк?",
         "options": ["Нет", "Только одинарные", "Да", "Зависит от ситуации"],
         "answer": "Да"
     },
     {
        "question":"Что делает функция `print()`?",
        "options": ["Получает ввод от пользователя", "Выводит данные на экран", "Выполняет математические операции", "Создает переменные"],
         "answer": "Выводит данные на экран"
     },
    {
         "question":"Какой символ используют для переноса строки в Python?",
        "options": ["\\n", "\\t", "\\r", "\\s"],
        "answer": "\\n"
      },
     {
       "question": "Что выведет `print('Hello, \\nWorld!')`?",
        "options": ["Hello, \\nWorld!", "Hello, \nWorld!", "Error", "Hello, World!"],
        "answer": "Hello, \nWorld!"
      },
    {
        "question": "Можно ли использовать функцию `print()` без аргументов?",
        "options": ["Нет, это вызовет ошибку", "Да, выведет пустую строку", "Да, выведет текущую дату", "Нет, она всегда должна что-то выводить"],
        "answer": "Да, выведет пустую строку"
    },
     {
        "question": "Как запустить файл Python на выполнение?",
        "options": ["Открыть в текстовом редакторе", "Двойным кликом", "С помощью интерпретатора, набрав `python имя_файла.py`", "Просто перетащить в браузер"],
         "answer": "С помощью интерпретатора, набрав `python имя_файла.py`"
    },
     {
        "question": "Что такое Python?",
        "options": ["Браузер", "Операционная система", "Язык программирования", "База данных"],
        "answer": "Язык программирования"
      },
       {
          "question": "Что выведет `print(5 * 'A')`?",
           "options": ["5A", "AAAAA", "Error", "A5"],
            "answer": "AAAAA"
        },
      {
        "question": "Для чего используется  `#` в Python?",
        "options": ["Для обозначения ошибки", "Для комментариев", "Для вывода результатов", "Для обозначения переменных"],
        "answer": "Для комментариев"
      },
       {
           "question": "Что выведет `print(True)`?",
            "options": ["True", "False", "1", "0"],
            "answer": "True"
        },
       {
           "question": "Что выведет `print('2' * 3)`?",
            "options": ["6", "222", "2*3", "Error"],
            "answer": "222"
        }
    ]
    ],
    "Переменные и волшебные числа": [
      {
        "question": "Что такое переменная в Python?",
        "options": ["Зарезервированное слово", "Место в памяти для хранения данных", "Функция", "Комментарий"],
        "answer": "Место в памяти для хранения данных"
      },
      {
        "question": "Какой оператор используется для присваивания значения переменной?",
        "options": ["==", "+=", "=", ":="],
        "answer": "="
      },
      {
        "question": "Какой тип данных используется для хранения целых чисел?",
        "options": ["string", "float", "int", "bool"],
        "answer": "int"
      },
      {
        "question": "Какой тип данных используется для хранения чисел с плавающей точкой?",
         "options": ["int", "str", "float", "list"],
         "answer": "float"
      },
       {
        "question": "Какой тип данных используется для хранения текста?",
        "options": ["int", "float", "str", "bool"],
        "answer": "str"
       },
       {
          "question": "Что такое 'волшебное число' в программировании?",
          "options": ["Секретный код", "Число, которое имеет магические свойства", "Число, которое используется без объяснения его значения", "Число, которое всегда возвращает True"],
           "answer": "Число, которое используется без объяснения его значения"
        },
        {
          "question": "Как принято называть переменные в Python?",
           "options": ["С заглавной буквы", "Использовать только цифры", "Использовать snake_case", "Использовать CamelCase"],
           "answer": "Использовать snake_case"
         },
      {
        "question": "Что выведет `x = 5; print(x)`?",
        "options": ["'x'", "5", "Error", "Nothing"],
        "answer": "5"
      },
        {
          "question":"Что выведет `x = 10; x = 20; print(x)`?",
          "options": ["10", "20", "Error", "10,20"],
          "answer": "20"
       },
        {
            "question": "Можно ли изменять значение переменной после ее создания?",
            "options": ["Нет", "Да", "Зависит от типа данных", "Только если переменная была создана глобально"],
             "answer": "Да"
        },
       {
           "question":"Какой тип данных у переменной `x = True`?",
           "options": ["int", "float", "str", "bool"],
           "answer": "bool"
       },
       {
          "question":"Какой тип данных у переменной `x = 3.14`?",
           "options": ["int", "float", "str", "bool"],
           "answer": "float"
       },
       {
            "question": "Что такое 'динамическая типизация'?",
           "options": ["Типы переменных нужно указывать явно", "Тип переменной определяется во время выполнения", "Переменные не могут изменять свой тип", "Всегда нужно объявлять тип переменной перед использованием"],
           "answer": "Тип переменной определяется во время выполнения"
       },
       {
          "question": "Что выведет `x = 'hello'; print(type(x))`?",
           "options": ["<class 'int'>", "<class 'float'>", "<class 'str'>", "<class 'bool'>"],
           "answer": "<class 'str'>"
        },
      {
           "question":"Что выведет `x = 5; x = x + 2; print(x)`?",
           "options": ["5", "7", "2", "Error"],
           "answer": "7"
       },
       {
         "question": "Какое правило именования переменных в Python считается хорошим стилем?",
          "options": ["Использовать только короткие имена", "Использовать имена, которые описывают значение", "Использовать случайные символы", "Не использовать буквы"],
          "answer": "Использовать имена, которые описывают значение"
      },
        {
          "question":"Можно ли использовать зарезервированные слова в качестве имен переменных?",
          "options": ["Да", "Нет", "Зависит от контекста", "Только в особых случаях"],
          "answer": "Нет"
        },
         {
            "question": "Что выведет `x = 10; print(x + '2')`?",
           "options": ["12", "Error", "102", "10 + 2"],
           "answer": "Error"
       },
         {
            "question":"Какой оператор увеличит значение `x` на 1?",
            "options": ["x = x - 1", "x += 1", "x =+ 1", "x := 1"],
             "answer": "x += 1"
          },
          {
            "question": "Как называется процесс преобразования типа данных?",
            "options": ["Форматирование", "Типизация", "Кастинг", "Компиляция"],
            "answer": "Кастинг"
          }
    ],
    "Лабиринт условий": [
        {
        "question": "Какое ключевое слово используется для проверки условия в Python?",
        "options": ["while", "for", "if", "check"],
        "answer": "if"
      },
      {
        "question": "Какой оператор используется для проверки на равенство?",
        "options": ["=", "==", "!=", "==="],
        "answer": "=="
      },
        {
         "question": "Что делает конструкция `if a < 5:`?",
        "options": ["Выполняет блок кода, если a больше 5", "Выполняет блок кода, если a меньше 5", "Выполняет блок кода в любом случае", "Вызывает ошибку"],
        "answer": "Выполняет блок кода, если a меньше 5"
      },
        {
         "question": "Какой оператор используется для 'не равно'?",
        "options": ["==", "!=", "<>", "=", "==="],
        "answer": "!="
      },
        {
          "question": "Что делает `else` в конструкции `if-else`?",
          "options": ["Выполняет блок кода всегда", "Выполняет блок кода если условие `if` истинно", "Выполняет блок кода, если условие `if` ложно", "Не имеет смысла"],
           "answer": "Выполняет блок кода, если условие `if` ложно"
        },
     {
        "question": "Что такое `elif` в Python?",
          "options": ["Сокращение от `if`", "Сокращение от `else if`", "Альтернатива `else`", "Не существует такого оператора"],
        "answer": "Сокращение от `else if`"
     },
        {
        "question": "Какой оператор используется для 'и' в условиях?",
         "options": ["and", "or", "not", "xor"],
         "answer": "and"
      },
     {
        "question": "Какой оператор используется для 'или' в условиях?",
         "options": ["and", "or", "not", "xor"],
         "answer": "or"
    },
     {
         "question":"Какой оператор используется для отрицания условия?",
         "options": ["and", "or", "not", "xor"],
         "answer": "not"
     },
        {
            "question":"Что выведет код `a = 5; if a > 10: print('yes'); else: print('no')`?",
             "options": ["yes", "no", "Error", "nothing"],
            "answer":"no"
         },
        {
            "question": "Какой будет результат выражения `(5 > 3) and (2 < 4)`?",
             "options": ["True", "False", "Error", "None"],
            "answer": "True"
        },
        {
            "question":"Какой будет результат выражения `(5 < 3) or (2 < 4)`?",
            "options": ["True", "False", "Error", "None"],
            "answer": "True"
         },
        {
            "question": "Что выведет код `a = 10; if not a > 5: print('yes'); else: print('no')`?",
           "options": ["yes", "no", "Error", "Nothing"],
           "answer": "no"
        },
        {
            "question": "Для чего используется отступы в Python?",
           "options": ["Для красоты кода", "Для обозначения границ блока кода", "Для комментариев", "Для обозначения переменных"],
           "answer": "Для обозначения границ блока кода"
        },
        {
           "question":"Что такое вложенные условные операторы?",
           "options": ["Условия, которые выполняются всегда", "Условия внутри других условий", "Условия, которые используются только в циклах", "Условия, которые выполняются только один раз"],
           "answer":"Условия внутри других условий"
        },
      {
        "question": "Какой результат выражения `True and False`?",
         "options": ["True", "False", "Error", "None"],
         "answer": "False"
      },
      {
         "question": "Какой результат выражения `True or False`?",
         "options": ["True", "False", "Error", "None"],
         "answer": "True"
      },
      {
          "question":"Что выведет код `a = 5; if a > 0 and a < 10: print('ok')`?",
           "options": ["ok", "Error", "Nothing", "True"],
           "answer": "ok"
      },
     {
        "question": "В каком случае выполнится блок кода `else`?",
          "options": ["Если условие в `if` истинно", "Если условие в `if` ложно", "Всегда", "Никогда"],
         "answer": "Если условие в `if` ложно"
      },
       {
         "question":"Какое ключевое слово не относится к условным операторам?",
         "options": ["if", "else", "elif", "while"],
          "answer": "while"
       }
    ],
    "Функциональная башня": [
      {
        "question": "Что такое функция в Python?",
        "options": [
          "Блок кода, который выполняется один раз",
          "Именованный блок кода, который можно вызывать несколько раз",
          "Переменная",
          "Оператор"
        ],
        "answer": "Именованный блок кода, который можно вызывать несколько раз"
      },
      {
        "question": "Какое ключевое слово используется для определения функции?",
        "options": ["func", "def", "function", "define"],
        "answer": "def"
      },
      {
        "question": "Как вызвать функцию?",
        "options": [
          "Использовать ключевое слово call",
          "Указать имя функции и круглые скобки",
          "Использовать имя функции без скобок",
          "Присвоить функцию переменной"
        ],
        "answer": "Указать имя функции и круглые скобки"
      },
      {
        "question": "Что такое аргумент функции?",
        "options": [
          "Имя функции",
          "Значение, передаваемое в функцию",
          "Результат работы функции",
          "Ключевое слово"
        ],
        "answer": "Значение, передаваемое в функцию"
      },
      {
        "question": "Что такое параметр функции?",
        "options": [
          "Имя переменной, принимающей аргумент в функции",
          "Результат функции",
          "Ключевое слово `return`",
          "Встроенная функция"
        ],
        "answer": "Имя переменной, принимающей аргумент в функции"
      },
       {
        "question": "Какое ключевое слово используется для возврата значения из функции?",
         "options": ["return", "yield", "exit", "result"],
         "answer": "return"
      },
      {
        "question": "Что выведет `def my_func(): print('Hello'); my_func()`?",
        "options": ["Nothing", "Error", "Hello", "my_func"],
        "answer": "Hello"
      },
      {
        "question": "Что такое область видимости переменной?",
        "options": [
          "Время жизни переменной",
          "Место, где переменная может использоваться",
          "Тип переменной",
          "Имя переменной"
        ],
        "answer": "Место, где переменная может использоваться"
      },
      {
        "question":"Что выведет `def sum(a,b): return a+b; print(sum(2,3))`?",
          "options": ["5", "23", "Error", "None"],
          "answer": "5"
      },
      {
        "question": "Можно ли вызывать функцию внутри другой функции?",
        "options": ["Нет", "Да", "Только если функция определена ранее", "Только если функция не имеет аргументов"],
         "answer": "Да"
      },
       {
          "question":"Что выведет `def func(): x = 10; print(x); func(); print(x)`?",
           "options": ["10 10", "Error", "10", "Nothing"],
            "answer": "Error"
        },
      {
        "question": "Что такое рекурсия?",
          "options": [
            "Вызов одной функции",
           "Вызов функции внутри самой себя",
           "Вызов функции несколько раз",
           "Вызов функции с ошибкой"
           ],
        "answer":"Вызов функции внутри самой себя"
       },
       {
          "question": "Что такое docstring?",
          "options": [
            "Имя функции",
            "Строка документации функции",
            "Комментарий в коде",
             "Имя переменной"
            ],
            "answer": "Строка документации функции"
        },
        {
          "question": "Какие бывают типы аргументов функций?",
           "options": [
            "Именованные, неименованные",
             "Только неименованные",
              "Только именованные",
             "Нет типов аргументов"
          ],
          "answer": "Именованные, неименованные"
        },
      {
        "question": "Что выведет `def func(x=5): print(x); func()`?",
        "options": ["Error", "Nothing", "5", "x"],
        "answer": "5"
      },
     {
        "question": "Что означает `*args` в параметрах функции?",
          "options":[
            "Один аргумент",
             "Неопределенное количество позиционных аргументов",
            "Именованный аргумент",
             "Аргументы по умолчанию"
          ],
         "answer":"Неопределенное количество позиционных аргументов"
        },
      {
        "question": "Что означает `**kwargs` в параметрах функции?",
          "options":[
             "Неопределенное количество ключевых аргументов",
             "Аргументы по умолчанию",
            "Только один аргумент",
             "Аргументы без значений"
          ],
          "answer":"Неопределенное количество ключевых аргументов"
      },
        {
           "question":"Какая функция вызовет ошибку `TypeError`?",
            "options": [
                "`def func(a,b): return a+b; func(2,3)`",
                "`def func(a): print(a); func(5)`",
                "`def func(a): return a; func('test')`",
                "`def func(a, b): return a+b; func(2)`"
            ],
            "answer":"`def func(a, b): return a+b; func(2)`"
         },
          {
             "question":"Можно ли в функции изменить значение глобальной переменной?",
             "options": ["Да, напрямую", "Нет, нужно использовать `global`", "Да, только если переменная объявлена ранее", "Нет"],
             "answer":"Нет, нужно использовать `global`"
        },
       {
          "question": "Что такое lambda-функция?",
            "options": [
              "Функция с именем `lambda`",
               "Анонимная функция",
             "Функция, которая вызывает ошибку",
            "Функция для работы с файлами"
             ],
          "answer": "Анонимная функция"
       }
    ],
    "Лабиринт условий":[
      {
        "question": "Какое ключевое слово используется для проверки условия?",
        "options": ["loop", "check", "if", "condition"],
        "answer": "if"
      },
      {
        "question": "Какой оператор используется для проверки на равенство?",
        "options": ["=", "==", "!=", ":="],
        "answer": "=="
      },
       {
         "question": "Что делает конструкция `if a > 10:`?",
        "options": ["Выполняет блок кода, если a меньше 10", "Выполняет блок кода, если a больше 10", "Выполняет блок кода в любом случае", "Вызывает ошибку"],
        "answer": "Выполняет блок кода, если a больше 10"
      },
       {
         "question": "Какой оператор используется для проверки на 'не равно'?",
        "options": ["=", "!=", "==", "<>"],
        "answer": "!="
      },
      {
        "question": "Что делает `else` в конструкции `if-else`?",
        "options": [
          "Выполняет блок кода всегда",
          "Выполняет блок кода, если условие `if` истинно",
          "Выполняет блок кода, если условие `if` ложно",
          "Не имеет смысла"
        ],
        "answer": "Выполняет блок кода, если условие `if` ложно"
      },
      {
         "question": "Что такое `elif`?",
         "options": [
            "Сокращение от `if`",
             "Сокращение от `else if`",
             "Альтернатива `else`",
            "Не существует такого оператора"
            ],
            "answer": "Сокращение от `else if`"
        },
      {
        "question": "Какой оператор используется для 'и'?",
        "options": ["or", "and", "not", "xor"],
        "answer": "and"
      },
      {
        "question": "Какой оператор используется для 'или'?",
        "options": ["and", "or", "not", "xor"],
        "answer": "or"
      },
      {
         "question":"Какой оператор используется для отрицания условия?",
         "options": ["and", "or", "not", "xor"],
         "answer": "not"
     },
      {
         "question": "Что выведет `a = 5; if a < 10: print('yes')`?",
          "options": ["yes", "no", "Nothing", "Error"],
         "answer": "yes"
      },
      {
        "question": "Какой результат выражения `(5 > 3) and (2 < 1)`?",
        "options": ["True", "False", "Error", "None"],
        "answer": "False"
      },
      {
        "question": "Какой результат выражения `(5 < 3) or (2 < 1)`?",
        "options": ["True", "False", "Error", "None"],
         "answer": "False"
      },
     {
        "question":"Что выведет `a = 10; if not a < 5: print('yes'); else: print('no')`?",
          "options": ["yes", "no", "Error", "Nothing"],
         "answer": "yes"
       },
       {
        "question": "Что обозначают отступы в условных операторах?",
         "options": [
            "Комментарии",
            "Границы блока кода",
            "Выделение кода",
           "Просто пробелы"
        ],
        "answer": "Границы блока кода"
      },
       {
           "question": "Что такое вложенные условные операторы?",
           "options": [
               "Операторы, которые всегда выполняются",
               "Условия внутри других условий",
                "Операторы, которые используются только в циклах",
                "Условия, которые выполняются один раз"
           ],
           "answer":"Условия внутри других условий"
       },
       {
        "question": "Какой результат выражения `True and False`?",
          "options": ["True", "False", "Error", "None"],
          "answer": "False"
        },
      {
        "question": "Какой результат выражения `True or False`?",
         "options": ["True", "False", "Error", "None"],
         "answer": "True"
      },
       {
         "question": "Что выведет `a = 7; if a > 5 and a < 10: print('ok')`?",
         "options": ["ok", "Error", "Nothing", "True"],
         "answer": "ok"
       },
        {
         "question": "В каком случае выполнится блок `else`?",
         "options": [
             "Когда условие в `if` истинно",
            "Когда условие в `if` ложно",
              "Всегда",
              "Никогда"
          ],
          "answer": "Когда условие в `if` ложно"
        },
       {
          "question": "Какое ключевое слово не используется в условных операторах?",
         "options": ["if", "else", "elif", "while"],
         "answer": "while"
        }
    ],
    "Сокровища списков":[
      {
        "question": "Что такое список в Python?",
        "options": [
          "Набор уникальных элементов",
          "Упорядоченная изменяемая коллекция элементов",
          "Неизменяемая последовательность символов",
          "Коллекция элементов без порядка"
        ],
        "answer": "Упорядоченная изменяемая коллекция элементов"
      },
      {
        "question": "Как создать пустой список?",
        "options": ["list()", "[]", "{}", "()"],
        "answer": "[]"
      },
      {
        "question": "Как получить доступ к элементу списка по его индексу?",
        "options": [
          "Использовать метод `get()`",
          "Указать индекс в квадратных скобках",
          "Указать индекс в круглых скобках",
          "Использовать метод `access()`"
        ],
        "answer": "Указать индекс в квадратных скобках"
      },
        {
         "question": "С какого индекса начинается нумерация элементов списка?",
          "options": ["С 1", "С 0", "С -1", "Со случайного"],
        "answer": "С 0"
      },
      {
        "question": "Как добавить элемент в конец списка?",
        "options": ["append()", "add()", "insert()", "push()"],
        "answer": "append()"
      },
       {
        "question": "Как вставить элемент в список по определенному индексу?",
         "options": ["append()", "add()", "insert()", "push()"],
        "answer": "insert()"
        },
       {
        "question": "Как удалить элемент из списка по его значению?",
          "options": ["remove()", "delete()", "pop()", "del"],
         "answer": "remove()"
      },
      {
        "question": "Как удалить элемент из списка по его индексу?",
        "options": ["remove()", "delete()", "pop()", "del"],
        "answer": "pop()"
      },
       {
         "question": "Что такое слайс списка?",
          "options": [
             "Элемент списка",
             "Часть списка",
            "Удаление элементов из списка",
              "Сортировка элементов списка"
          ],
           "answer": "Часть списка"
        },
       {
         "question":"Что выведет `my_list = [1, 2, 3]; print(my_list[1])`?",
         "options": ["1", "2", "3", "Error"],
         "answer": "2"
       },
       {
          "question":"Что выведет `my_list = [1, 2, 3]; my_list.append(4); print(my_list)`?",
          "options": ["[1, 2, 3]", "[1, 2, 3, 4]", "Error", "None"],
          "answer": "[1, 2, 3, 4]"
       },
       {
        "question": "Как узнать длину списка?",
         "options": ["size()", "length()", "count()", "len()"],
         "answer": "len()"
      },
     {
         "question":"Что выведет `my_list = [1,2,3]; my_list.insert(1, 4); print(my_list)`?",
         "options": ["[1, 4, 2, 3]", "[1, 2, 4, 3]", "[4, 1, 2, 3]", "Error"],
           "answer": "[1, 4, 2, 3]"
      },
        {
        "question": "Можно ли хранить элементы разных типов в одном списке?",
         "options": ["Нет", "Да", "Только если это строки", "Только если это числа"],
         "answer": "Да"
        },
       {
          "question":"Как создать копию списка?",
           "options": [
              "Новый список = старый список",
             "Использовать метод `copy()`",
               "Использовать цикл",
               "Списки нельзя копировать"
           ],
           "answer":"Использовать метод `copy()`"
         },
        {
            "question":"Что выведет `my_list = [1, 2, 3]; print(my_list[-1])`?",
             "options": ["1", "3", "Error", "-1"],
            "answer":"3"
        },
         {
             "question":"Что выведет `my_list = [1, 2, 3, 4, 5]; print(my_list[1:3])`?",
              "options": ["[1, 2]", "[2, 3]", "[1, 2, 3]", "[2, 3, 4]"],
             "answer":"[2, 3]"
         },
      {
         "question":"Что выведет `my_list = [1, 2, 3]; my_list.remove(2); print(my_list)`?",
        "options": ["Error", "[1, 3]", "[1, 2]", "[2, 3]"],
        "answer": "[1, 3]"
      },
      {
        "question":"Что выведет `my_list = [1, 2, 3]; my_list.pop(1); print(my_list)`?",
         "options": ["[1, 3]", "[1, 2]", "[2, 3]", "Error"],
         "answer": "[1, 3]"
      },
       {
         "question":"Что делает метод `sort()`?",
         "options":[
             "Перемешивает элементы",
             "Сортирует элементы по возрастанию",
              "Сортирует элементы по убыванию",
               "Удаляет элементы"
            ],
           "answer":"Сортирует элементы по возрастанию"
       }
    ],
    "Словарный остров":[
      {
        "question": "Что такое словарь в Python?",
        "options": [
          "Упорядоченная коллекция элементов",
          "Неупорядоченная коллекция пар 'ключ-значение'",
          "Коллекция уникальных элементов",
          "Изменяемая строка"
        ],
        "answer": "Неупорядоченная коллекция пар 'ключ-значение'"
      },
      {
        "question": "Как создать пустой словарь?",
        "options": ["dict()", "[]", "{}", "()"],
        "answer": "{}"
      },
      {
        "question": "Как получить значение по ключу в словаре?",
        "options": [
          "Использовать метод `get()`",
          "Указать ключ в квадратных скобках",
          "Указать ключ в круглых скобках",
          "Использовать метод `access()`"
        ],
        "answer": "Указать ключ в квадратных скобках"
      },
      {
        "question": "Могут ли ключи словаря быть изменяемыми?",
        "options": ["Да", "Нет", "Только если это строки", "Только если это числа"],
        "answer": "Нет"
      },
      {
        "question": "Как добавить пару 'ключ-значение' в словарь?",
        "options": [
          "Использовать метод `add()`",
          "Присвоить значение по ключу",
          "Использовать метод `insert()`",
          "Использовать метод `append()`"
        ],
        "answer": "Присвоить значение по ключу"
      },
      {
       "question":"Как удалить пару 'ключ-значение' из словаря?",
       "options": ["remove()", "delete()", "pop()", "del"],
         "answer": "pop()"
      },
       {
        "question": "Как проверить наличие ключа в словаре?",
        "options": [
          "Использовать метод `has_key()`",
          "Использовать оператор `in`",
           "Использовать метод `contains()`",
         "Использовать оператор `==`"
        ],
        "answer": "Использовать оператор `in`"
      },
      {
        "question": "Как получить все ключи словаря?",
          "options": [
           "Использовать метод `keys()`",
           "Использовать метод `values()`",
           "Использовать метод `items()`",
          "Указать название словаря"
          ],
         "answer": "Использовать метод `keys()`"
      },
        {
          "question":"Как получить все значения словаря?",
            "options": [
                "Использовать метод `keys()`",
               "Использовать метод `values()`",
               "Использовать метод `items()`",
                "Указать название словаря"
            ],
            "answer": "Использовать метод `values()`"
          },
        {
          "question":"Как получить все пары 'ключ-значение' словаря?",
           "options": [
                "Использовать метод `keys()`",
               "Использовать метод `values()`",
                "Использовать метод `items()`",
                "Указать название словаря"
           ],
           "answer": "Использовать метод `items()`"
        },
      {
        "question": "Что выведет `my_dict = {'a': 1, 'b': 2}; print(my_dict['b'])`?",
        "options": ["'b'", "2", "1", "Error"],
        "answer": "2"
      },
       {
         "question":"Что выведет `my_dict = {'a':1, 'b':2}; my_dict['c'] = 3; print(my_dict)`?",
          "options": ["{'a': 1, 'b': 2}", "{'a': 1, 'b': 2, 'c': 3}", "Error", "None"],
         "answer":"{'a': 1, 'b': 2, 'c': 3}"
        },
        {
            "question":"Что выведет `my_dict = {'a': 1, 'b': 2}; print(my_dict.keys())`?",
            "options": ["['a', 'b']", "dict_keys(['a', 'b'])", "['a', 1, 'b', 2]", "Error"],
            "answer": "dict_keys(['a', 'b'])"
         },
        {
            "question": "Что выведет `my_dict = {'a': 1, 'b': 2}; print(my_dict.values())`?",
            "options": ["['1', '2']", "dict_values([1, 2])", "[1, 2]", "Error"],
            "answer":"dict_values([1, 2])"
          },
          {
            "question": "Что выведет `my_dict = {'a': 1, 'b': 2}; print(my_dict.items())`?",
            "options": ["(['a', 1], ['b', 2])", "dict_items([('a', 1), ('b', 2)])", "['a': 1, 'b': 2]", "Error"],
            "answer": "dict_items([('a', 1), ('b', 2)])"
        },
        {
        "question": "Можно ли изменять значения словаря?",
          "options": ["Нет", "Да", "Только ключи", "Только значения"],
           "answer":"Да"
        },
        {
          "question": "Что выведет `my_dict = {'a': 1, 'b': 2}; print('a' in my_dict)`?",
            "options": ["True", "False", "Error", "None"],
            "answer":"True"
          },
        {
         "question":"Какой метод удаляет пару ключ-значение из словаря по ключу?",
          "options": ["delete()", "remove()", "pop()", "clear()"],
           "answer":"pop()"
       },
       {
           "question":"Можно ли иметь несколько одинаковых ключей в словаре?",
           "options": ["Да", "Нет", "Только если значения разные", "Только если это числовые ключи"],
           "answer":"Нет"
       },
       {
        "question": "Какой метод очищает словарь?",
           "options": ["remove()", "delete()", "clear()", "pop()"],
           "answer":"clear()"
       }
    ],
    "Исключительный вулкан":[
            {
                "question": "Что такое исключение в Python?",
                "options": [
                    "Ошибка компиляции",
                    "Синтаксическая ошибка",
                    "Событие, которое нарушает нормальное выполнение программы",
                    "Сообщение об успешном выполнении"
                ],
                "answer": "Событие, которое нарушает нормальное выполнение программы"
            },
            {
                "question": "Какой блок используется для обработки исключений?",
                "options": ["catch", "except", "try", "handle"],
                "answer": "try"
            },
            {
                "question": "Какой блок кода выполняется, если исключение было поймано?",
                "options": ["try", "else", "finally", "except"],
                "answer": "except"
            },
            {
                "question": "Какой блок кода выполняется всегда, независимо от наличия исключения?",
                "options": ["else", "finally", "catch", "handle"],
                "answer": "finally"
            },
           {
                "question": "Для чего используется блок `else` после `try...except`?",
                 "options": [
                  "Выполняется, если исключение произошло",
                  "Выполняется, если исключения не произошло",
                    "Выполняется всегда",
                   "Никогда не выполняется"
                ],
                "answer": "Выполняется, если исключения не произошло"
            },
            {
                "question": "Что делает ключевое слово `raise`?",
                "options": [
                  "Перехватывает исключение",
                   "Генерирует исключение",
                  "Завершает программу",
                   "Игнорирует исключение"
                ],
                "answer": "Генерирует исключение"
            },
            {
                "question": "Какой тип исключения возникает при делении на ноль?",
                "options": [
                    "ValueError",
                    "TypeError",
                    "ZeroDivisionError",
                   "IndexError"
                 ],
                "answer": "ZeroDivisionError"
            },
             {
                "question": "Какой тип исключения возникает при попытке доступа к несуществующему индексу списка?",
                "options": [
                    "KeyError",
                    "IndexError",
                    "TypeError",
                   "ValueError"
                ],
                "answer": "IndexError"
            },
            {
                "question":"Что выведет код `try: x = 1/0; print(x); except: print('Error')`?",
                 "options": ["Error", "ZeroDivisionError", "0", "Nothing"],
                 "answer": "Error"
             },
              {
                "question":"Что выведет код `try: x = 10; print(x); finally: print('finally')`?",
                 "options": ["10", "finally", "10finally", "Error"],
                 "answer": "10finally"
            },
            {
                "question": "Можно ли использовать несколько блоков `except` в одном блоке `try`?",
                "options": ["Нет", "Да", "Только один `except`", "Зависит от контекста"],
                "answer": "Да"
            },
            {
                 "question": "Что делает `pass` в блоке `except`?",
                 "options": [
                    "Завершает программу",
                    "Игнорирует исключение",
                     "Переходит к следующему `except` блоку",
                    "Вызывает ошибку"
                ],
                 "answer": "Игнорирует исключение"
           },
            {
                "question": "Какой тип исключения возникает, когда ключ не найден в словаре?",
                "options": [
                    "ValueError",
                    "TypeError",
                    "KeyError",
                     "IndexError"
                ],
                "answer": "KeyError"
            },
            {
                "question": "Что делает исключение `FileNotFoundError`?",
                 "options": [
                    "Ошибка при делении на ноль",
                    "Файл не найден",
                     "Ошибка типа данных",
                    "Ошибка индекса"
                ],
                "answer": "Файл не найден"
             },
            {
                "question": "Можно ли в блоке `finally` использовать `return`?",
                "options": ["Нет", "Да, всегда", "Только если нет `except`", "Только если нет `try`"],
                "answer": "Да, всегда"
            },
             {
                "question":"Что выведет код `try: raise TypeError('test'); except TypeError as e: print(e)`?",
                 "options": ["TypeError", "test", "Error", "Nothing"],
                "answer": "test"
             },
            {
                "question": "Что такое кастомное исключение?",
                "options": [
                    "Встроенное исключение",
                   "Исключение, созданное пользователем",
                    "Исключение без названия",
                     "Исключение, которое нельзя перехватить"
                ],
                "answer": "Исключение, созданное пользователем"
            },
            {
                "question": "Как создать кастомное исключение?",
                 "options": [
                    "Использовать `raise CustomError`",
                   "Наследовать от класса `Exception`",
                    "Просто присвоить имя",
                    "Нельзя создавать кастомные исключения"
                ],
                "answer": "Наследовать от класса `Exception`"
            },
              {
                "question": "Когда возникает `NameError`?",
                 "options": [
                    "При делении на ноль",
                   "При обращении к необъявленной переменной",
                     "При ошибке типа",
                    "При ошибке импорта"
                ],
                 "answer": "При обращении к необъявленной переменной"
              },
             {
                "question": "Можно ли в блоке `except` обработать все исключения?",
                "options": ["Нет", "Да, с помощью `except:`", "Только конкретные исключения", "Зависит от контекста"],
                "answer": "Да, с помощью `except:`"
             }
        ],
    "Файловый портал":[
            {
                "question": "Какая функция используется для открытия файла?",
                "options": ["open()", "file()", "read()", "write()"],
                "answer": "open()"
            },
           {
                "question": "Какой режим используется для чтения файла?",
                "options": ["'w'", "'r'", "'a'", "'x'"],
                "answer": "'r'"
            },
            {
                "question": "Какой режим используется для записи в файл?",
                "options": ["'r'", "'w'", "'a'", "'x'"],
                 "answer": "'w'"
            },
            {
                "question": "Какой режим используется для добавления в файл?",
               "options": ["'r'", "'w'", "'a'", "'x'"],
              "answer": "'a'"
            },
            {
                "question": "Какой метод используется для чтения всего содержимого файла?",
               "options": ["read()", "readline()", "readlines()", "get()"],
                "answer": "read()"
            },
             {
                "question": "Какой метод используется для чтения файла построчно?",
              "options": ["read()", "readline()", "readlines()", "get()"],
                 "answer": "readline()"
             },
            {
               "question": "Какой метод используется для записи в файл?",
                "options": ["write()", "read()", "append()", "print()"],
                "answer": "write()"
            },
            {
                "question": "Как закрыть открытый файл?",
                "options": ["close()", "exit()", "stop()", "end()"],
                "answer": "close()"
            },
            {
               "question": "Что делает режим `'x'` при открытии файла?",
                "options": [
                  "Создает новый файл, если он не существует",
                   "Открывает файл для чтения",
                  "Создает новый файл и вызывает ошибку, если он существует",
                    "Открывает файл для записи"
                ],
                "answer": "Создает новый файл и вызывает ошибку, если он существует"
            },
             {
                "question": "Что выведет `f = open('test.txt', 'w'); f.write('Hello'); f.close(); f=open('test.txt', 'r'); print(f.read()); f.close()`?",
                  "options": ["Hello", "Error", "Nothing", "test"],
                 "answer": "Hello"
            },
            {
                "question": "Какой блок лучше всего использовать для автоматического закрытия файла?",
                "options": ["try", "if", "while", "with"],
                 "answer": "with"
            },
             {
                "question": "Какой метод возвращает список строк файла?",
               "options": ["read()", "readline()", "readlines()", "get()"],
                 "answer": "readlines()"
             },
            {
                 "question": "Что произойдет, если открыть файл для чтения, и он не существует?",
                "options": [
                     "Файл создастся",
                   "Возникнет ошибка `FileNotFoundError`",
                    "Программа завершится",
                    "Будет выведено сообщение об ошибке"
                ],
                "answer": "Возникнет ошибка `FileNotFoundError`"
            },
            {
                "question": "Какой символ используется для переноса строки в файле?",
                "options": ["\\n", "\\t", "\\r", "\\s"],
                "answer": "\\n"
            },
            {
                "question": "Какой режим позволяет читать и записывать в файл?",
                "options": ["'r'", "'w'", "'a'", "'r+'"],
                "answer": "'r+'"
            },
            {
                 "question": "Что такое буфер при работе с файлами?",
                 "options": [
                    "Место для хранения временных данных",
                  "Место для хранения файла",
                  "Место для хранения паролей",
                   "Место для хранения ошибок"
                ],
                "answer": "Место для хранения временных данных"
             },
            {
               "question": "Что выведет `f = open('test.txt', 'w'); f.write('123'); f.close(); f=open('test.txt', 'r'); print(len(f.read())); f.close()`?",
               "options": ["1", "2", "3", "Error"],
                 "answer": "3"
             },
             {
                "question": "Что выведет `with open('test.txt', 'w') as f: f.write('test'); with open('test.txt', 'r') as f: print(f.readline())`?",
                "options": ["test", "Error", "Nothing", "test\\n"],
                 "answer": "test"
            },
            {
                "question": "Можно ли открыть несколько файлов одновременно?",
                "options": ["Нет", "Да", "Только один", "Зависит от ОС"],
                "answer": "Да"
            },
             {
                "question": "Что будет, если открыть файл для записи (`'w'`) и он уже существует?",
                  "options": [
                    "Возникнет ошибка",
                   "Содержимое файла будет удалено",
                  "Файл будет открыт только для чтения",
                    "Файл не откроется"
                ],
                 "answer": "Содержимое файла будет удалено"
             }
        ],
    "Классный мир":[
            {
                "question": "Что такое класс в Python?",
                "options": [
                    "Переменная",
                    "Функция",
                    "Шаблон для создания объектов",
                   "Модуль"
                ],
                "answer": "Шаблон для создания объектов"
            },
            {
                "question": "Какое ключевое слово используется для определения класса?",
                "options": ["class", "def", "object", "type"],
                "answer": "class"
            },
            {
                "question": "Что такое объект?",
                "options": [
                   "Экземпляр класса",
                     "Функция",
                     "Модуль",
                     "Переменная"
                ],
                 "answer": "Экземпляр класса"
            },
            {
               "question": "Что такое атрибут класса?",
                "options": [
                     "Свойство объекта",
                    "Метод объекта",
                   "Функция в классе",
                    "Имя класса"
                ],
                "answer": "Свойство объекта"
            },
            {
                "question": "Что такое метод класса?",
                 "options": [
                   "Свойство объекта",
                   "Функция внутри класса",
                   "Тип данных",
                   "Название класса"
                 ],
                 "answer": "Функция внутри класса"
            },
            {
                 "question": "Что такое `__init__`?",
                 "options": [
                   "Метод для создания объекта",
                    "Метод для удаления объекта",
                    "Метод для получения атрибута",
                     "Метод для изменения атрибута"
                 ],
                "answer": "Метод для создания объекта"
            },
            {
                "question": "Что такое `self`?",
                 "options": [
                    "Ключевое слово для создания класса",
                     "Ссылка на текущий объект",
                    "Название класса",
                    "Аргумент функции"
                 ],
                 "answer": "Ссылка на текущий объект"
            },
             {
                "question": "Что такое наследование?",
                "options": [
                   "Создание объекта",
                    "Изменение метода",
                     "Копирование класса",
                    "Создание нового класса на основе существующего"
                ],
                 "answer": "Создание нового класса на основе существующего"
            },
            {
               "question":"Что выведет `class MyClass: x = 5; obj = MyClass(); print(obj.x)`?",
                "options": ["5", "MyClass", "obj.x", "Error"],
                "answer": "5"
            },
            {
              "question": "Что такое инкапсуляция?",
              "options": [
                    "Объединение данных и методов в одном классе",
                   "Наследование от другого класса",
                    "Создание объекта",
                     "Удаление метода"
                ],
                 "answer": "Объединение данных и методов в одном классе"
             },
              {
                "question": "Что такое полиморфизм?",
                "options": [
                     "Возможность переопределять методы в подклассах",
                   "Наследование от другого класса",
                   "Создание объекта",
                   "Удаление метода"
                ],
                "answer": "Возможность переопределять методы в подклассах"
             },
            {
                "question": "Какой метод вызывается при удалении объекта?",
                  "options": [
                    "`__del__`",
                     "`__init__`",
                     "`__str__`",
                     "`__call__`"
                  ],
                 "answer": "`__del__`"
            },
              {
                 "question": "Что делает метод `__str__`?",
                 "options": [
                     "Создает новый объект",
                    "Возвращает строковое представление объекта",
                   "Удаляет объект",
                    "Изменяет атрибут объекта"
                  ],
                 "answer": "Возвращает строковое представление объекта"
              },
            {
                "question": "Можно ли изменять атрибуты объекта?",
                "options": ["Нет", "Да", "Только в методах", "Только внутри `__init__`"],
                "answer": "Да"
            },
            {
               "question": "Что такое конструктор класса?",
                "options": [
                    "Метод `__del__`",
                     "Метод `__init__`",
                    "Любой метод",
                    "Метод для удаления объекта"
                ],
                "answer": "Метод `__init__`"
            },
             {
                "question":"Что выведет `class Test: def __init__(self, x): self.x = x; t = Test(10); print(t.x)`?",
                  "options": ["10", "x", "Test", "Error"],
                 "answer": "10"
             },
              {
                 "question":"Что выведет `class A: def method(self): print('A'); class B(A): pass; b = B(); b.method()`?",
                 "options": ["A", "B", "Error", "Nothing"],
                 "answer": "A"
             },
            {
                "question": "Может ли класс иметь несколько конструкторов?",
                "options": ["Да", "Нет", "Только один", "Зависит от контекста"],
                "answer": "Нет"
            },
             {
               "question":"Что выведет `class Test: def __str__(self): return 'str'; t = Test(); print(t)`?",
               "options": ["str", "Test", "Error", "Nothing"],
                 "answer": "str"
             },
            {
                "question": "Какой принцип ООП позволяет использовать один интерфейс для разных типов объектов?",
                 "options": [
                    "Инкапсуляция",
                     "Наследование",
                    "Полиморфизм",
                   "Абстракция"
                ],
                 "answer": "Полиморфизм"
            }
        ],
    "Модульная крепость":[
            {
                "question": "Что такое модуль в Python?",
                "options": [
                    "Файл с кодом",
                    "Класс",
                    "Функция",
                     "Объект"
                ],
                 "answer": "Файл с кодом"
            },
            {
                "question": "Как импортировать модуль?",
                "options": [
                    "Использовать `load`",
                   "Использовать `import`",
                   "Использовать `include`",
                    "Использовать `get`"
                ],
                 "answer": "Использовать `import`"
            },
            {
               "question": "Как импортировать конкретную функцию из модуля?",
                "options": [
                    "`import module.function`",
                     "`from module import function`",
                   "`import function from module`",
                    "`from function import module`"
                ],
                "answer": "`from module import function`"
            },
            {
                "question": "Что делает ключевое слово `as` при импорте?",
                 "options": [
                    "Создает копию модуля",
                    "Переименовывает модуль",
                     "Удаляет модуль",
                     "Игнорирует модуль"
                 ],
                "answer": "Переименовывает модуль"
            },
            {
                "question": "Как импортировать все имена из модуля?",
               "options": [
                     "`from module import *`",
                   "`import * from module`",
                   "`import module.*`",
                    "`from module import all`"
               ],
               "answer": "`from module import *`"
            },
             {
                "question": "Что такое пакет в Python?",
                 "options": [
                   "Файл с кодом",
                    "Набор модулей в директории",
                   "Функция",
                   "Класс"
                 ],
                "answer": "Набор модулей в директории"
            },
            {
                "question": "Какой файл нужен для обозначения директории как пакета?",
                "options": ["`__init__.py`", "`main.py`", "`config.py`", "`setup.py`"],
                 "answer": "`__init__.py`"
             },
             {
                "question": "Где Python ищет модули?",
                "options": [
                     "В текущей директории",
                   "В стандартных директориях",
                     "В переменных среды",
                    "Все вышеперечисленное"
                ],
                 "answer": "Все вышеперечисленное"
            },
            {
                "question":"Как импортировать модуль с названием `my_module`?",
                "options": [
                  "`import 'my_module'`",
                    "`import my_module`",
                     "`load my_module`",
                     "`include my_module`"
                ],
                "answer": "`import my_module`"
             },
             {
                "question": "Что такое `sys.path`?",
                "options": [
                   "Список доступных модулей",
                    "Список директорий для поиска модулей",
                    "Название текущего файла",
                    "Переменная окружения"
                ],
                "answer": "Список директорий для поиска модулей"
             },
            {
                "question": "Как получить все имена модуля?",
                "options": [
                  "Использовать метод `names()`",
                   "Использовать `dir(module)`",
                    "Использовать `get_names()`",
                    "Использовать `import_all()`"
                ],
                "answer": "Использовать `dir(module)`"
            },
            {
               "question": "Что такое `__name__`?",
               "options": [
                   "Название текущего файла",
                   "Название текущего модуля",
                    "Название функции",
                    "Название класса"
                ],
                "answer": "Название текущего модуля"
            },
            {
                 "question":"Что происходит если `__name__ == '__main__'`?",
                 "options": [
                    "Модуль используется как скрипт",
                   "Модуль импортирован",
                    "Вызывается ошибка",
                    "Ничего не происходит"
                 ],
                  "answer": "Модуль используется как скрипт"
            },
             {
                "question": "Можно ли импортировать модуль из другого пакета?",
                "options": ["Нет", "Да", "Только в текущем пакете", "Зависит от ОС"],
                 "answer": "Да"
             },
             {
                "question": "Что выведет `import math; print(math.sqrt(4))`?",
                "options": ["4", "2", "Error", "16"],
                "answer": "2"
            },
           {
                 "question":"Что выведет `from math import pi; print(pi)`?",
                 "options": ["3.14", "Error", "math.pi", "pi"],
                 "answer": "3.14"
            },
           {
                "question": "Можно ли переименовать модуль при импорте?",
                "options": ["Нет", "Да, используя `as`", "Только при импорте функции", "Зависит от ОС"],
                "answer": "Да, используя `as`"
            },
           {
             "question": "Что такое `pip`?",
               "options": [
                   "Интегрированная среда разработки",
                    "Менеджер пакетов",
                   "Интерпретатор Python",
                  "Редактор кода"
                ],
                "answer": "Менеджер пакетов"
            },
            {
                "question": "Можно ли создавать собственные модули?",
                "options": ["Нет", "Да", "Только при использовании классов", "Только встроенные"],
                 "answer": "Да"
            },
             {
                "question":"Что выведет `from random import randint; print(randint(1, 5))`?",
                 "options": [
                    "Случайное число от 1 до 5",
                    "Число 1 или 5",
                     "Ошибка",
                     "5"
                 ],
                  "answer": "Случайное число от 1 до 5"
             }
        ],
    "Финальная миссия: Автоматизация":[
      {
        "question": "Что такое автоматизация в программировании?",
        "options": [
          "Процесс написания кода вручную",
          "Выполнение задач без участия человека",
          "Оптимизация кода для быстрого выполнения",
          "Управление ресурсами программы"
        ],
        "answer": "Выполнение задач без участия человека"
      },
      {
        "question": "Какие задачи можно автоматизировать с помощью Python?",
        "options": [
          "Только веб-разработку",
          "Только анализ данных",
          "Разнообразные задачи, от веб-скрапинга до обработки файлов",
          "Только игры"
        ],
        "answer": "Разнообразные задачи, от веб-скрапинга до обработки файлов"
      },
      {
        "question": "Какой модуль Python используется для работы с операционной системой?",
        "options": ["os", "sys", "time", "random"],
        "answer": "os"
      },
      {
        "question": "Какой модуль используется для работы со временем?",
        "options": ["os", "sys", "time", "random"],
        "answer": "time"
      },
      {
        "question": "Что такое веб-скрапинг?",
        "options": [
          "Создание веб-сайтов",
          "Автоматический сбор данных с веб-сайтов",
          "Тестирование веб-приложений",
          "Оптимизация кода для веба"
        ],
        "answer": "Автоматический сбор данных с веб-сайтов"
      },
      {
         "question": "Какой модуль Python часто используется для веб-скрапинга?",
         "options": ["BeautifulSoup", "Flask", "Django", "requests"],
        "answer": "BeautifulSoup"
     },
      {
        "question": "Как получить список файлов в директории?",
        "options": [
          "os.list()",
          "os.files()",
          "os.listdir()",
          "os.getfiles()"
        ],
        "answer": "os.listdir()"
      },
      {
        "question": "Как создать директорию?",
        "options": [
          "os.mkdir()",
          "os.makedir()",
          "os.create_dir()",
          "os.newdir()"
        ],
        "answer": "os.mkdir()"
      },
       {
         "question": "Как переименовать файл?",
        "options": [
            "os.rename()",
           "os.change_name()",
           "os.modify_name()",
            "os.set_name()"
        ],
        "answer": "os.rename()"
      },
        {
          "question": "Как удалить файл?",
           "options": [
            "os.delete()",
             "os.remove()",
            "os.unlink()",
             "os.kill()"
          ],
          "answer": "os.remove()"
       },
      {
        "question": "Как выполнить команду операционной системы?",
        "options": [
          "os.command()",
           "os.execute()",
           "os.run()",
           "os.system()"
        ],
        "answer": "os.system()"
      },
      {
        "question": "Как получить текущее время?",
        "options": [
          "time.now()",
          "time.current()",
           "time.time()",
          "time.gettime()"
        ],
        "answer": "time.time()"
      },
     {
        "question": "Как сделать паузу в выполнении программы?",
          "options": [
            "time.delay()",
            "time.sleep()",
             "time.pause()",
             "time.wait()"
        ],
        "answer": "time.sleep()"
     },
        {
           "question":"Что такое cron?",
            "options":[
             "Инструмент для управления базами данных",
             "Инструмент для планирования задач",
             "Инструмент для веб-скрапинга",
              "Инструмент для тестирования кода"
             ],
           "answer": "Инструмент для планирования задач"
        },
       {
            "question": "Для чего используется `subprocess`?",
           "options": [
              "Для работы с файлами",
             "Для запуска сторонних программ",
              "Для работы с сетью",
               "Для графики"
            ],
            "answer": "Для запуска сторонних программ"
        },
     {
       "question": "Что делает `shutil`?",
          "options": [
           "Работа с сетью",
             "Работа с файлами",
             "Работа с изображениями",
            "Работа с базами данных"
        ],
        "answer": "Работа с файлами"
       },
      {
        "question": "Какой модуль используется для работы с регулярными выражениями?",
         "options": ["regex", "re", "pattern", "match"],
         "answer": "re"
       },
      {
        "question": "Как получить аргументы командной строки?",
         "options": ["os.args", "sys.argv", "command.args", "get.args"],
         "answer": "sys.argv"
      },
    {
       "question": "Можно ли автоматизировать отправку email с помощью Python?",
        "options": ["Нет", "Да", "Только в веб-приложениях", "Только через сторонние сервисы"],
        "answer": "Да"
      },
      {
        "question": "Что делает библиотека `schedule`?",
          "options": [
           "Запускает программу",
          "Планирует выполнение программы",
           "Тестирует код",
            "Оптимизирует код"
        ],
        "answer": "Планирует выполнение программы"
      }
    ],
    "Тайны строк": [
      {
        "question": "Что такое строка в Python?",
        "options": [
          "Коллекция чисел",
          "Последовательность символов",
          "Логическое значение",
          "Объект"
        ],
        "answer": "Последовательность символов"
      },
      {
        "question": "Как создать строку?",
        "options": [
          "Использовать кавычки (' или \")",
          "Использовать скобки ()",
          "Использовать {} ",
          "Использовать <>"
        ],
        "answer": "Использовать кавычки (' или \")"
      },
      {
        "question": "Являются ли строки изменяемыми?",
        "options": ["Да", "Нет", "Зависит от ситуации", "Только в некоторых версиях Python"],
        "answer": "Нет"
      },
      {
         "question": "Как получить длину строки?",
        "options": ["size()", "len()", "length()", "count()"],
        "answer": "len()"
       },
      {
        "question": "Как получить символ строки по индексу?",
        "options": [
           "Использовать `get()`",
          "Использовать квадратные скобки `[]`",
           "Использовать круглые скобки `()`",
          "Использовать `access()`"
        ],
        "answer": "Использовать квадратные скобки `[]`"
      },
      {
          "question":"Что такое слайс строки?",
          "options":[
            "Один символ",
            "Подстрока",
            "Разделение строки",
             "Перестановка символов"
          ],
          "answer":"Подстрока"
       },
      {
        "question": "Какой метод используется для приведения строки к нижнему регистру?",
        "options": ["lower()", "lowercase()", "to_lower()", "low()"],
        "answer": "lower()"
      },
       {
         "question": "Какой метод используется для приведения строки к верхнему регистру?",
          "options": ["upper()", "uppercase()", "to_upper()", "high()"],
          "answer": "upper()"
       },
        {
          "question":"Какой метод используется для удаления пробельных символов в начале и конце строки?",
         "options": ["strip()", "trim()", "remove()", "clear()"],
         "answer":"strip()"
       },
      {
        "question":"Какой метод используется для разделения строки на список подстрок?",
         "options": ["split()", "divide()", "separate()", "partition()"],
        "answer": "split()"
      },
      {
         "question": "Какой метод используется для поиска подстроки в строке?",
         "options": ["search()", "find()", "locate()", "seek()"],
         "answer": "find()"
      },
      {
        "question": "Как проверить, начинается ли строка с определенной подстроки?",
        "options": [
          "start()",
          "startswith()",
          "is_start()",
          "begin()"
        ],
        "answer": "startswith()"
      },
    {
        "question":"Как проверить, заканчивается ли строка определенной подстрокой?",
         "options": ["end()", "endswith()", "is_end()", "finish()"],
        "answer":"endswith()"
      },
      {
        "question": "Как заменить подстроку в строке?",
        "options": ["replace()", "change()", "modify()", "substitute()"],
        "answer": "replace()"
      },
       {
          "question":"Как отформатировать строку?",
          "options": [
            "Использовать оператор +",
             "Использовать f-строки",
             "Использовать метод `format()`",
               "Все вышеперечисленное"
          ],
          "answer": "Все вышеперечисленное"
        },
    {
       "question":"Что выведет `'hello'.upper()`?",
        "options": ["hello", "HELLO", "Error", "HelLo"],
        "answer": "HELLO"
      },
      {
         "question":"Что выведет `' hello '.strip()`?",
         "options": ["'hello'", "' hello '", "'hello '", "Error"],
        "answer":"'hello'"
      },
       {
        "question": "Что выведет `'1,2,3'.split(',')`?",
          "options": ["123", "['1', '2', '3']", "[1, 2, 3]", "Error"],
         "answer": "['1', '2', '3']"
       },
        {
          "question":"Что выведет `'hello world'.find('world')`?",
           "options": ["0", "6", "5", "-1"],
            "answer": "6"
        },
      {
        "question": "Что выведет `print(f'Result: {2 + 2}')`?",
         "options": ["'Result: 2 + 2'", "Result: 4", "Result: {2 + 2}", "Error"],
        "answer":"Result: 4"
      }
    ],
    "Многомерные загадки":[
        {
          "question": "Что такое многомерный список?",
           "options":[
             "Список с одним элементом",
             "Список, внутри которого есть другие списки",
              "Список строк",
              "Список чисел"
           ],
           "answer": "Список, внутри которого есть другие списки"
        },
        {
         "question": "Как получить доступ к элементу в многомерном списке?",
          "options":[
            "Использовать один индекс",
            "Использовать несколько индексов",
            "Использовать метод `get()`",
             "Использовать метод `access()`"
          ],
           "answer": "Использовать несколько индексов"
        },
        {
           "question": "Что такое матрица?",
            "options":[
              "Симметричный список",
             "Многомерный список с одинаковым количеством элементов",
             "Список с разными элементами",
               "Переменная"
            ],
            "answer": "Многомерный список с одинаковым количеством элементов"
        },
        {
          "question":"Что выведет `matrix = [[1, 2], [3, 4]]; print(matrix[0][1])`?",
          "options": ["1", "2", "3", "4"],
          "answer": "2"
        },
         {
           "question": "Как создать пустой многомерный список?",
            "options":[
             "`[]`",
               "`[[]]`",
                "`[[[]]]`",
                "Нельзя создать пустой многомерный список"
            ],
            "answer": "`[[]]`"
         },
        {
            "question": "Как найти количество строк в матрице?",
             "options":[
               "Метод `rows()`",
               "Метод `len()`",
               "Метод `columns()`",
                "Нельзя узнать"
             ],
             "answer": "Метод `len()`"
         },
         {
           "question":"Как получить количество столбцов в матрице?",
           "options": [
             "Использовать метод `len()`",
              "Использовать длину первого ряда",
              "Использовать длину последнего ряда",
              "Нельзя получить количество столбцов"
           ],
           "answer": "Использовать длину первого ряда"
         },
         {
             "question": "Что такое транспонирование матрицы?",
              "options": [
                 "Поворот матрицы",
                  "Обмен строк и столбцов",
                 "Удаление строк и столбцов",
                "Суммирование элементов"
              ],
              "answer": "Обмен строк и столбцов"
          },
          {
            "question": "Можно ли хранить элементы разных типов в многомерном списке?",
            "options": ["Нет", "Да", "Только если строки", "Только числа"],
            "answer": "Да"
          },
        {
         "question": "Что выведет `matrix = [[1, 2, 3], [4, 5, 6]]; print(len(matrix))`?",
          "options": ["2", "3", "6", "Error"],
          "answer": "2"
        },
         {
           "question": "Можно ли использовать циклы `for` для обработки многомерных списков?",
            "options": ["Нет", "Да", "Только один цикл", "Только циклы `while`"],
            "answer": "Да"
          },
        {
           "question": "Что такое NumPy в контексте многомерных списков?",
             "options": [
                "Библиотека для работы со строками",
                "Библиотека для научных вычислений и массивов",
                "Библиотека для веб-разработки",
                 "Библиотека для работы с графикой"
             ],
            "answer": "Библиотека для научных вычислений и массивов"
        },
        {
           "question":"Что выведет `matrix = [[1,2],[3,4]]; print(matrix[1])`?",
            "options": ["1", "2", "[3, 4]", "Error"],
            "answer": "[3, 4]"
        },
       {
          "question":"Что выведет `matrix = [[1,2,3],[4,5,6]]; print(matrix[0][2])`?",
           "options": ["1", "2", "3", "4"],
           "answer": "3"
       },
       {
            "question": "Какой метод `NumPy` используется для создания многомерного массива?",
              "options":[
               "`array()`",
               "`list()`",
                "`matrix()`",
               "`create()`"
              ],
            "answer": "`array()`"
         },
        {
            "question": "Какой метод `NumPy` используется для транспонирования матрицы?",
            "options":[
              "`transpose()`",
              "`swap()`",
                "`trans()`",
                "`rotate()`"
            ],
            "answer":"`transpose()`"
         },
        {
         "question":"Что выведет `matrix = [[[1,2],[3,4]], [[5,6],[7,8]]]; print(matrix[1][0][1])`?",
           "options": ["1", "2", "6", "7"],
          "answer":"6"
        },
       {
          "question": "Что делает `numpy.zeros((2, 2))`?",
            "options": [
                "Создает нулевой список",
                "Создает матрицу 2x2 из нулей",
                "Создает случайную матрицу 2x2",
                 "Создает список из нулей"
              ],
           "answer": "Создает матрицу 2x2 из нулей"
        },
        {
            "question":"Что делает `numpy.ones((3, 3))`?",
              "options":[
                 "Создает список из единиц",
                 "Создает матрицу 3x3 из единиц",
                 "Создает случайную матрицу 3x3",
                  "Создает матрицу из нулей"
              ],
             "answer":"Создает матрицу 3x3 из единиц"
          },
        {
            "question": "Что такое тензор в контексте многомерных списков?",
             "options":[
              "Простой список",
              "Многомерный массив",
              "Строка",
              "Словарь"
             ],
             "answer": "Многомерный массив"
        }
    ],
    "Генераторный шторм":[
      {
        "question": "Что такое генератор в Python?",
        "options": [
          "Функция, которая возвращает список",
          "Функция, которая возвращает итератор",
          "Класс, который генерирует числа",
          "Цикл, который повторяется бесконечно"
        ],
        "answer": "Функция, которая возвращает итератор"
      },
      {
        "question": "Какое ключевое слово используется для создания генератора?",
        "options": ["return", "yield", "create", "generate"],
        "answer": "yield"
      },
      {
        "question": "Чем отличается генератор от обычной функции?",
        "options": [
          "Генератор не может возвращать значения",
          "Генератор не может принимать аргументы",
          "Генератор сохраняет состояние между вызовами",
          "Генератор выполняется только один раз"
        ],
        "answer": "Генератор сохраняет состояние между вызовами"
      },
       {
         "question": "Что такое итератор?",
          "options":[
           "Функция",
            "Объект для обхода элементов",
            "Переменная",
            "Список"
          ],
           "answer": "Объект для обхода элементов"
        },
      {
        "question": "Какой метод используется для получения следующего значения из генератора?",
        "options": ["next()", "get()", "advance()", "nextval()"],
        "answer": "next()"
      },
      {
        "question": "Можно ли использовать цикл `for` для итерации по генератору?",
        "options": ["Нет", "Да", "Только цикл `while`", "Только если преобразовать в список"],
        "answer": "Да"
      },
    {
        "question": "Что такое генераторное выражение?",
          "options":[
           "Функция",
           "Синтаксис для создания генератора в одну строку",
            "Тип данных",
           "Класс"
        ],
        "answer": "Синтаксис для создания генератора в одну строку"
      },
      {
        "question": "Чем генераторное выражение отличается от спискового включения?",
         "options":[
           "Генераторное выражение создает список",
           "Генераторное выражение создает итератор",
            "Списковое включение не работает с циклами",
             "Они одинаковые"
        ],
        "answer": "Генераторное выражение создает итератор"
      },
    {
        "question": "Что выведет `def my_gen(): yield 1; yield 2; g = my_gen(); print(next(g)); print(next(g))`?",
        "options": ["1 2", "1", "2", "Error"],
        "answer": "1 2"
      },
       {
        "question":"Что выведет `def gen(): i=0; while i<2: yield i; i+=1; g=gen(); for x in g: print(x)`?",
          "options": ["0 1", "1 2", "0", "Error"],
         "answer": "0 1"
       },
      {
        "question":"Что делает генератор yield?",
          "options":[
            "Возвращает значение",
           "Приостанавливает функцию",
            "Завершает функцию",
           "Выводит значение на экран"
          ],
        "answer": "Приостанавливает функцию"
       },
        {
          "question": "Как получить все значения из генератора в виде списка?",
           "options": [
              "Использовать метод `list()`",
             "Использовать цикл `for`",
             "Использовать метод `all()`",
              "Нельзя получить все значения"
            ],
           "answer": "Использовать метод `list()`"
        },
       {
         "question": "Можно ли использовать несколько `yield` в одной функции?",
           "options": ["Нет", "Да", "Только один", "Зависит от версии"],
           "answer": "Да"
        },
        {
            "question": "Что выведет `g = (x for x in range(3)); print(next(g)); print(next(g))`?",
              "options": ["0 1", "1 2", "0", "Error"],
             "answer": "0 1"
        },
       {
           "question": "Что такое ленивые вычисления?",
            "options":[
              "Вычисления, которые выполняются сразу",
              "Вычисления, которые откладываются",
             "Вычисления с ошибками",
             "Вычисления с использованием генераторов"
            ],
            "answer": "Вычисления, которые откладываются"
         },
       {
        "question": "Чем генераторы полезны при работе с большими наборами данных?",
          "options":[
           "Не занимают много памяти",
           "Быстро работают",
            "Не могут обрабатывать большие данные",
            "Только для маленьких данных"
        ],
        "answer": "Не занимают много памяти"
        },
        {
            "question": "Что произойдет, если вызвать `next()` у исчерпанного генератора?",
            "options": [
                "Выведет `None`",
                "Возникнет ошибка `StopIteration`",
                "Генератор перезапустится",
                "Вызовет бесконечный цикл"
                ],
             "answer": "Возникнет ошибка `StopIteration`"
        },
      {
        "question": "Можно ли изменять значения, возвращаемые генератором?",
         "options": ["Нет", "Да", "Только если это список", "Только если это переменные"],
         "answer": "Нет"
      },
        {
           "question":"Можно ли использовать генераторы в рекурсивных функциях?",
           "options": ["Нет", "Да", "Только если нет цикла", "Только если есть `yield`"],
            "answer":"Да"
        },
      {
        "question": "Что выведет `def gen(): for i in range(2): yield i; g = gen(); print(list(g))`?",
        "options": ["0 1", "[0, 1]", "Error", "[0,1,0,1]"],
        "answer": "[0, 1]"
      }
    ],
    "Тайное время":[
      {
        "question": "Какой модуль Python используется для работы со временем?",
        "options": ["os", "sys", "time", "datetime"],
        "answer": "time"
      },
      {
        "question": "Какой модуль Python используется для работы с датами и временем?",
        "options": ["os", "sys", "time", "datetime"],
        "answer": "datetime"
      },
      {
        "question": "Какая функция модуля `time` возвращает текущее время в секундах с начала эпохи?",
        "options": ["time.now()", "time.current()", "time.time()", "time.gettime()"],
        "answer": "time.time()"
      },
        {
        "question": "Что такое 'эпоха' (epoch) в контексте времени?",
          "options": [
          "Начало новой эры",
            "Момент времени, с которого начинается отсчет времени",
             "Конец эры",
             "Текущее время"
          ],
          "answer": "Момент времени, с которого начинается отсчет времени"
        },
      {
        "question": "Какая функция модуля `time` используется для приостановки выполнения программы?",
        "options": ["time.delay()", "time.pause()", "time.sleep()", "time.wait()"],
        "answer": "time.sleep()"
      },
       {
         "question": "Что делает функция `time.localtime()`?",
        "options": [
            "Возвращает время в формате строки",
            "Возвращает местное время в виде структуры",
            "Возвращает время в формате UTC",
           "Приостанавливает выполнение программы"
        ],
         "answer": "Возвращает местное время в виде структуры"
      },
      {
        "question": "Какой формат времени UTC?",
        "options": ["Местное время", "Время в другом часовом поясе", "Всемирное координированное время", "Время на сервере"],
        "answer": "Всемирное координированное время"
      },
       {
        "question": "Что выведет `import time; print(time.time())`?",
         "options": [
            "Текущее время в формате 'чч:мм:сс'",
            "Текущее время в секундах с начала эпохи",
             "Текущую дату",
            "Ошибку"
            ],
        "answer": "Текущее время в секундах с начала эпохи"
       },
       {
        "question": "Что такое временная метка (timestamp)?",
         "options": [
            "Строка, представляющая дату",
             "Целое число, представляющее время",
            "Время в формате 'чч:мм:сс'",
            "Дата в формате 'гггг-мм-дд'"
         ],
         "answer": "Целое число, представляющее время"
        },
      {
        "question": "Как отформатировать дату и время в строку с помощью модуля `datetime`?",
        "options": [
            "Использовать метод `format()`",
           "Использовать метод `strftime()`",
           "Использовать метод `toString()`",
          "Использовать оператор `+`"
        ],
        "answer": "Использовать метод `strftime()`"
      },
      {
        "question": "Какой метод `datetime` используется для получения текущей даты и времени?",
        "options": ["datetime.now()", "datetime.current()", "datetime.today()", "datetime.get()"],
        "answer": "datetime.now()"
      },
    {
       "question": "Что такое часовой пояс (timezone)?",
          "options":[
           "Смещение времени относительно UTC",
           "Местоположение",
           "Локальная дата",
            "Интервал времени"
         ],
          "answer": "Смещение времени относительно UTC"
      },
    {
        "question": "Что делает метод `datetime.strptime()`?",
         "options": [
            "Преобразует строку в дату",
           "Преобразует дату в строку",
           "Возвращает текущее время",
            "Приостанавливает программу"
        ],
         "answer": "Преобразует строку в дату"
      },
       {
        "question":"Какой формат строки для года в `strftime()`?",
         "options": ["%y", "%Y", "%d", "%m"],
           "answer": "%Y"
        },
      {
       "question": "Какой формат строки для месяца в `strftime()`?",
        "options": ["%m", "%M", "%d", "%y"],
        "answer": "%m"
     },
       {
         "question": "Какой формат строки для дня в `strftime()`?",
         "options": ["%d", "%m", "%y", "%Y"],
         "answer": "%d"
      },
        {
          "question": "Что выведет `import datetime; print(datetime.datetime.now().strftime('%Y-%m-%d'))`?",
           "options": [
            "Текущую дату в формате 'дд-мм-гггг'",
            "Текущую дату в формате 'гггг-мм-дд'",
             "Текущую дату в формате 'мм-дд-гггг'",
           "Текущее время"
          ],
           "answer": "Текущую дату в формате 'гггг-мм-дд'"
        },
        {
            "question": "Что выведет `import datetime; print(datetime.datetime.now().hour)`?",
             "options": [
                "Текущий час",
                "Текущее время",
                "Текущую дату",
                 "0"
             ],
             "answer": "Текущий час"
          },
        {
          "question": "Что делает `timedelta`?",
          "options": [
            "Представляет дату",
            "Представляет разницу во времени",
            "Представляет текущее время",
             "Представляет часовой пояс"
            ],
          "answer":"Представляет разницу во времени"
        },
        {
          "question": "Как добавить 1 час к текущему времени с помощью `timedelta`?",
           "options": [
             "Использовать `timedelta(1)`",
              "Использовать `timedelta(hours=1)`",
              "Использовать `timedelta(minutes=60)`",
                "Нельзя добавить время"
            ],
            "answer": "Использовать `timedelta(hours=1)`"
        }
    ],
    "Магия итераций":[
      {
        "question": "Что такое итерация?",
        "options": [
          "Одно выполнение цикла",
          "Процесс обработки элемента последовательности",
          "Определение функции",
          "Ошибка в коде"
        ],
        "answer": "Процесс обработки элемента последовательности"
      },
      {
        "question": "Что такое итерируемый объект?",
        "options": [
          "Объект, который нельзя перебирать",
          "Объект, который можно перебирать в цикле",
          "Переменная",
          "Функция"
        ],
        "answer": "Объект, который можно перебирать в цикле"
      },
        {
            "question": "Какие типы данных являются итерируемыми?",
            "options": [
                "Только списки",
                "Только словари",
                "Списки, кортежи, строки, словари и т.д.",
                "Только числа"
            ],
            "answer": "Списки, кортежи, строки, словари и т.д."
        },
       {
         "question": "Что такое итератор?",
          "options":[
           "Объект для перебора элементов",
           "Переменная цикла",
            "Счетчик",
           "Функция"
          ],
           "answer": "Объект для перебора элементов"
        },
      {
        "question": "Какая функция используется для получения итератора?",
         "options": ["iter()", "iterator()", "get_iter()", "init()"],
        "answer": "iter()"
      },
      {
        "question": "Какая функция используется для получения следующего элемента итератора?",
        "options": ["next()", "get()", "advance()", "nextval()"],
        "answer": "next()"
      },
        {
         "question": "Что произойдет, если `next()` вызвана для исчерпанного итератора?",
         "options": [
             "Возникнет ошибка `StopIteration`",
            "Вернется `None`",
            "Цикл начнется заново",
             "Ничего не произойдет"
         ],
         "answer": "Возникнет ошибка `StopIteration`"
        },
      {
        "question": "Можно ли использовать цикл `for` с итератором?",
        "options": ["Нет", "Да", "Только `while`", "Только один раз"],
        "answer": "Да"
      },
    {
        "question": "Что делает `enumerate()`?",
          "options": [
            "Возвращает итератор без индекса",
           "Возвращает итератор с индексом",
             "Возвращает список",
           "Удаляет элемент"
           ],
          "answer": "Возвращает итератор с индексом"
        },
        {
        "question": "Что такое генератор?",
         "options": [
            "Итератор",
           "Объект, который возвращает последовательность значений при итерации",
           "Переменная",
           "Функция"
          ],
          "answer": "Объект, который возвращает последовательность значений при итерации"
       },
        {
           "question": "Какое ключевое слово используют в генераторах?",
           "options": ["return", "yield", "create", "next"],
           "answer": "yield"
         },
      {
        "question": "Чем генератор отличается от списка?",
          "options": [
            "Список хранит все элементы в памяти",
            "Генератор не хранит все элементы в памяти",
            "Список является итератором",
            "Генератор является итерируемым объектом"
         ],
         "answer": "Генератор не хранит все элементы в памяти"
      },
        {
          "question":"Что выведет `my_list = [1,2,3]; it = iter(my_list); print(next(it)); print(next(it))`?",
          "options": ["1 2", "1", "2", "Error"],
          "answer":"1 2"
       },
      {
        "question":"Что выведет `for i, el in enumerate(['a', 'b', 'c']): print(i, el)`?",
          "options": ["0 a 1 b 2 c", "a 0 b 1 c 2", "a b c", "Error"],
          "answer": "0 a 1 b 2 c"
      },
      {
       "question": "Что делает функция `zip()`?",
        "options": [
           "Объединяет два итератора в один",
           "Создает список из двух итераторов",
            "Сортирует итераторы",
             "Удаляет элементы из итератора"
         ],
        "answer": "Объединяет два итератора в один"
      },
    {
        "question": "Можно ли использовать `zip()` с итераторами разной длины?",
          "options": ["Нет", "Да, игнорируя лишние", "Да, выдавая ошибку", "Только равной длины"],
           "answer": "Да, игнорируя лишние"
      },
    {
       "question": "Что выведет `a = [1, 2]; b = ['a', 'b']; print(list(zip(a,b)))`?",
        "options": ["[1, 'a'], [2, 'b']", "[(1, 'a'), (2, 'b')]", "[(1, 2), ('a', 'b')]", "Error"],
         "answer": "[(1, 'a'), (2, 'b')]"
    },
        {
         "question": "Что делает функция `reversed()`?",
           "options":[
              "Сортирует итератор",
              "Возвращает итератор в обратном порядке",
              "Удаляет элементы итератора",
              "Меняет порядок элементов"
            ],
           "answer": "Возвращает итератор в обратном порядке"
        },
     {
        "question": "Что такое comprehension?",
          "options":[
           "Функция",
             "Краткий синтаксис для создания итерируемых объектов",
              "Тип данных",
              "Метод итерации"
          ],
        "answer": "Краткий синтаксис для создания итерируемых объектов"
      },
      {
        "question": "Какие бывают виды comprehension?",
          "options": [
           "Только списковые",
           "Списковые, словарные, множественные",
            "Только генераторные",
             "Только словарные"
          ],
          "answer": "Списковые, словарные, множественные"
       }
    ],
    "Сетевые квесты":[
      {
        "question": "Что такое HTTP?",
        "options": [
          "Протокол для передачи файлов",
          "Протокол для передачи гипертекста",
          "Протокол для электронной почты",
          "Протокол для баз данных"
        ],
        "answer": "Протокол для передачи гипертекста"
      },
      {
        "question": "Какой порт используется для HTTP?",
        "options": ["21", "22", "80", "443"],
        "answer": "80"
      },
      {
         "question": "Какой порт используется для HTTPS?",
          "options": ["21", "22", "80", "443"],
         "answer": "443"
        },
      {
        "question": "Что такое URL?",
        "options": [
          "Уникальный идентификатор файла",
          "Уникальный адрес веб-ресурса",
          "Имя сервера",
          "Тип данных"
        ],
        "answer": "Уникальный адрес веб-ресурса"
      },
       {
        "question": "Что такое GET запрос?",
          "options": [
            "Запрос на получение данных с сервера",
            "Запрос на отправку данных на сервер",
            "Запрос на изменение данных на сервере",
            "Запрос на удаление данных с сервера"
          ],
          "answer": "Запрос на получение данных с сервера"
        },
     {
        "question": "Что такое POST запрос?",
          "options":[
            "Запрос на получение данных с сервера",
            "Запрос на отправку данных на сервер",
             "Запрос на изменение данных на сервере",
            "Запрос на удаление данных с сервера"
          ],
           "answer": "Запрос на отправку данных на сервер"
        },
      {
        "question": "Какой модуль Python используется для HTTP запросов?",
        "options": ["socket", "requests", "http", "urllib"],
        "answer": "requests"
      },
      {
        "question": "Что такое JSON?",
        "options": [
          "Язык программирования",
          "Формат обмена данными",
           "Протокол сети",
           "Тип данных"
        ],
        "answer": "Формат обмена данными"
      },
        {
        "question": "Какой метод `requests` используется для GET запроса?",
          "options": ["get()", "post()", "request()", "fetch()"],
        "answer": "get()"
      },
      {
        "question":"Какой метод `requests` используется для POST запроса?",
           "options": ["get()", "post()", "request()", "send()"],
           "answer": "post()"
        },
      {
         "question": "Что такое API?",
           "options": [
             "Веб-сайт",
              "Интерфейс для взаимодействия между программами",
              "Протокол сети",
               "Тип данных"
          ],
         "answer": "Интерфейс для взаимодействия между программами"
      },
      {
          "question": "Какой метод `requests` возвращает код ответа сервера?",
            "options": ["status_code", "code()", "get_code()", "response_code"],
           "answer": "status_code"
      },
      {
        "question": "Какой код ответа сервера означает 'OK'?",
          "options": ["200", "404", "500", "302"],
        "answer": "200"
      },
      {
        "question": "Какой код ответа сервера означает 'Not Found'?",
          "options": ["200", "404", "500", "302"],
         "answer": "404"
      },
      {
        "question": "Какой метод `requests` используется для получения содержимого ответа в виде текста?",
           "options": ["text", "content()", "body()", "string()"],
        "answer": "text"
       },
        {
            "question": "Какой метод используется для преобразования JSON в Python словарь?",
             "options": [
                "`json.loads()`",
                 "`json.dumps()`",
                 "`json.parse()`",
                 "`json.decode()`"
              ],
            "answer": "`json.loads()`"
        },
       {
         "question": "Какой метод используется для преобразования Python словаря в JSON?",
         "options": [
             "`json.loads()`",
              "`json.dumps()`",
             "`json.encode()`",
              "`json.write()`"
            ],
         "answer": "`json.dumps()`"
        },
        {
          "question": "Что выведет `import requests; r=requests.get('https://www.google.com'); print(r.status_code)`?",
           "options": ["200", "404", "500", "Error"],
            "answer":"200"
        },
         {
            "question": "Что такое веб-сокеты?",
             "options": [
                 "Протокол для работы с базами данных",
               "Протокол для постоянного обмена данными",
                "Протокол для отправки email",
               "Протокол для передачи файлов"
             ],
             "answer": "Протокол для постоянного обмена данными"
         },
      {
          "question":"Что такое OAuth?",
           "options": [
             "Протокол для HTTP запросов",
              "Протокол для авторизации и авторизации",
             "Формат для обмена данными",
              "Инструмент для веб-скрапинга"
           ],
            "answer": "Протокол для авторизации и авторизации"
        }
    ],
    
    "Пандас в дикой природе":[
      {
        "question": "Что такое Pandas?",
        "options": [
          "Библиотека для работы с графикой",
          "Библиотека для работы с табличными данными",
          "Библиотека для веб-разработки",
          "Библиотека для машинного обучения"
        ],
        "answer": "Библиотека для работы с табличными данными"
      },
      {
        "question": "Какой тип данных Pandas используется для представления таблиц?",
        "options": ["Series", "DataFrame", "Array", "Table"],
        "answer": "DataFrame"
      },
      {
        "question": "Какой тип данных Pandas используется для представления одномерных данных?",
         "options": ["Series", "DataFrame", "Array", "List"],
         "answer": "Series"
        },
        {
          "question":"Как импортировать Pandas?",
           "options": [
           "`import pandas`",
            "`from pandas import *`",
             "`import pd`",
              "`import pandas as pd`"
            ],
           "answer": "`import pandas as pd`"
        },
      {
         "question": "Как создать DataFrame из словаря?",
          "options":[
            "Использовать `pd.from_dict()`",
            "Использовать `pd.DataFrame()`",
           "Использовать `pd.create()`",
           "Использовать `pd.dict_to_df()`"
           ],
           "answer":"Использовать `pd.DataFrame()`"
        },
      {
        "question": "Как прочитать DataFrame из CSV файла?",
         "options":[
           "Использовать `pd.read_csv()`",
            "Использовать `pd.read_file()`",
           "Использовать `pd.from_csv()`",
            "Использовать `pd.load_csv()`"
         ],
         "answer": "Использовать `pd.read_csv()`"
      },
      {
        "question": "Как вывести первые несколько строк DataFrame?",
          "options": [
          "Использовать метод `head()`",
            "Использовать метод `first()`",
            "Использовать метод `top()`",
          "Использовать оператор `[]`"
          ],
        "answer": "Использовать метод `head()`"
      },
      {
        "question": "Как вывести последние несколько строк DataFrame?",
         "options": [
           "Использовать метод `tail()`",
           "Использовать метод `last()`",
          "Использовать метод `bottom()`",
          "Использовать оператор `[]`"
         ],
          "answer": "Использовать метод `tail()`"
      },
        {
          "question": "Как получить информацию о DataFrame (типы, количество строк)?",
           "options": [
             "Использовать метод `info()`",
            "Использовать метод `describe()`",
            "Использовать метод `details()`",
             "Использовать метод `summary()`"
           ],
         "answer": "Использовать метод `info()`"
         },
        {
          "question": "Как получить статистические данные о DataFrame?",
           "options": [
              "Использовать метод `info()`",
               "Использовать метод `describe()`",
              "Использовать метод `details()`",
              "Использовать метод `stats()`"
           ],
          "answer": "Использовать метод `describe()`"
        },
      {
        "question": "Как получить доступ к столбцу DataFrame?",
           "options":[
             "Использовать метод `get()`",
            "Указать имя столбца в квадратных скобках",
            "Использовать круглые скобки",
           "Использовать `access()`"
          ],
        "answer": "Указать имя столбца в квадратных скобках"
      },
    {
        "question":"Как отфильтровать строки DataFrame по условию?",
         "options": [
           "Использовать `filter()`",
           "Использовать логическое индексирование",
           "Использовать метод `select()`",
            "Использовать метод `where()`"
          ],
          "answer": "Использовать логическое индексирование"
       },
      {
          "question": "Как добавить новый столбец в DataFrame?",
         "options": [
            "Использовать метод `add_column()`",
            "Присвоить список новому имени столбца",
           "Использовать метод `insert()`",
            "Использовать метод `append()`"
        ],
          "answer": "Присвоить список новому имени столбца"
      },
       {
         "question": "Как удалить столбец из DataFrame?",
         "options": [
            "Использовать метод `remove()`",
          "Использовать метод `drop()`",
          "Использовать оператор `del`",
           "Использовать метод `delete()`"
            ],
          "answer": "Использовать метод `drop()`"
       },
    {
        "question": "Как сохранить DataFrame в CSV файл?",
          "options":[
            "Использовать метод `to_csv()`",
           "Использовать метод `write_csv()`",
           "Использовать метод `save_csv()`",
            "Использовать метод `output_csv()`"
          ],
           "answer": "Использовать метод `to_csv()`"
      },
     {
        "question": "Что делает метод `groupby()`?",
          "options": [
          "Сортирует строки",
           "Группирует строки по значениям столбца",
           "Удаляет строки",
            "Выводит строки"
            ],
        "answer": "Группирует строки по значениям столбца"
      },
    {
        "question": "Что делает метод `fillna()`?",
           "options":[
           "Удаляет пустые значения",
           "Заполняет пустые значения",
             "Игнорирует пустые значения",
           "Сортирует данные"
         ],
        "answer": "Заполняет пустые значения"
      },
     {
        "question":"Что такое индексация DataFrame?",
         "options": [
           "Поиск данных",
           "Доступ к данным по меткам",
           "Сортировка данных",
           "Фильтрация данных"
         ],
          "answer": "Доступ к данным по меткам"
       },
    {
       "question":"Что такое `loc`?",
       "options": [
        "Индексация по числовому значению",
        "Индексация по меткам",
         "Метод сортировки",
        "Метод удаления"
       ],
       "answer": "Индексация по меткам"
    },
        {
         "question": "Что такое `iloc`?",
           "options":[
            "Индексация по меткам",
            "Индексация по целочисленным значениям",
              "Метод фильтрации",
            "Метод группировки"
           ],
           "answer":"Индексация по целочисленным значениям"
        }
    ],
    "Потоковый лабиринт":[
      {
        "question": "Что такое поток (thread) в программировании?",
        "options": [
          "Блок кода",
          "Последовательность инструкций, выполняемых параллельно",
          "Функция",
          "Тип данных"
        ],
        "answer": "Последовательность инструкций, выполняемых параллельно"
      },
      {
        "question": "Что такое многопоточность?",
        "options": [
          "Выполнение кода последовательно",
          "Выполнение нескольких потоков одновременно",
          "Один процесс",
          "Работа с одним файлом"
        ],
        "answer": "Выполнение нескольких потоков одновременно"
      },
       {
         "question": "Какой модуль Python используется для работы с потоками?",
          "options": ["os", "sys", "threading", "multiprocessing"],
          "answer": "threading"
        },
        {
            "question": "Как создать новый поток?",
             "options": [
                "Использовать `threading.create()`",
              "Использовать `threading.Thread()`",
                 "Использовать `threading.new()`",
              "Использовать `threading.start()`"
            ],
            "answer": "Использовать `threading.Thread()`"
        },
      {
        "question": "Как запустить поток на выполнение?",
          "options":[
          "Использовать метод `run()`",
          "Использовать метод `start()`",
           "Использовать метод `execute()`",
           "Использовать метод `begin()`"
           ],
           "answer": "Использовать метод `start()`"
      },
       {
         "question": "Как дождаться завершения потока?",
           "options": [
            "Использовать метод `join()`",
           "Использовать метод `wait()`",
          "Использовать метод `sleep()`",
           "Использовать метод `end()`"
           ],
          "answer": "Использовать метод `join()`"
       },
      {
        "question": "Что такое гонка данных?",
           "options": [
             "Ситуация, когда несколько потоков пытаются изменить данные",
            "Ситуация, когда два потока выполняются одновременно",
           "Ситуация, когда один поток ждет другого",
            "Ситуация, когда нет доступа к данным"
            ],
        "answer": "Ситуация, когда несколько потоков пытаются изменить данные"
      },
      {
        "question": "Что такое блокировка (lock) в потоках?",
          "options": [
            "Метод для остановки потока",
            "Метод для синхронизации доступа к общим ресурсам",
            "Метод для запуска потока",
           "Метод для управления памятью"
          ],
          "answer": "Метод для синхронизации доступа к общим ресурсам"
      },
     {
        "question": "Как создать блокировку?",
          "options": [
          "`threading.Lock()`",
           "`threading.createLock()`",
            "`threading.newLock()`",
             "`threading.getLock()`"
            ],
        "answer": "`threading.Lock()`"
      },
    {
        "question": "Какие проблемы могут возникнуть при использовании потоков?",
           "options":[
            "Проблемы с производительностью",
             "Проблемы с памятью",
            "Гонка данных и тупики",
             "Все вышеперечисленное"
          ],
          "answer": "Гонка данных и тупики"
       },
      {
        "question": "Что такое тупик (deadlock)?",
           "options": [
            "Ситуация, когда поток ждет бесконечно",
            "Ситуация, когда два потока работают параллельно",
             "Ситуация, когда нет доступа к памяти",
             "Ситуация, когда поток заканчивает работу"
            ],
           "answer": "Ситуация, когда поток ждет бесконечно"
        },
     {
        "question": "Что делает `with lock:`?",
          "options": [
            "Создает блокировку",
            "Гарантирует автоматическое освобождение блокировки",
            "Удаляет блокировку",
              "Приостанавливает блокировку"
           ],
          "answer": "Гарантирует автоматическое освобождение блокировки"
      },
        {
           "question": "Что такое GIL в Python?",
             "options": [
             "Глобальная переменная",
            "Глобальная блокировка интерпретатора",
              "Глобальный список",
            "Глобальный таймер"
            ],
            "answer": "Глобальная блокировка интерпретатора"
         },
         {
            "question":"Что означает `threading.active_count()`?",
           "options": [
            "Количество доступных ядер",
             "Количество запущенных потоков",
             "Время работы потока",
             "Имя текущего потока"
            ],
          "answer": "Количество запущенных потоков"
         },
         {
            "question": "Какой метод `threading` используется для получения текущего потока?",
             "options": [
               "`threading.current_thread()`",
                "`threading.get_thread()`",
                 "`threading.active_thread()`",
                 "`threading.main_thread()`"
             ],
             "answer": "`threading.current_thread()`"
          },
       {
            "question":"Можно ли изменить имя потока?",
             "options": ["Нет", "Да, с помощью `name`", "Только при создании", "Только после завершения"],
             "answer": "Да, с помощью `name`"
        },
        {
          "question":"Что выведет `import threading; def f(): print(threading.current_thread().name); t = threading.Thread(target=f); t.start()`?",
          "options": ["MainThread", "Thread", "Error", "Nothing"],
          "answer": "Thread"
        },
        {
           "question": "Что такое потокобезопасность?",
           "options": [
             "Когда код выполняется только в одном потоке",
            "Когда код не вызывает ошибок в многопоточной среде",
             "Когда код выполняется очень быстро",
             "Когда код не требует много ресурсов"
          ],
           "answer": "Когда код не вызывает ошибок в многопоточной среде"
        },
        {
           "question": "Что такое `threading.Event()`?",
            "options":[
                "Объект для блокировки",
              "Объект для сигнализации между потоками",
              "Объект для создания нового потока",
                "Объект для хранения данных"
             ],
              "answer": "Объект для сигнализации между потоками"
         },
        {
          "question": "Что такое `multiprocessing`?",
            "options":[
               "Библиотека для работы с сетью",
               "Библиотека для работы с процессами",
             "Библиотека для работы с потоками",
              "Библиотека для работы с графикой"
              ],
           "answer": "Библиотека для работы с процессами"
        }
    ]
    
}